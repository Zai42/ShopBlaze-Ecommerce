// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace ShopBlazeAPI.CompiledModels
{
    public partial class ShopBlazeEcommerceContextModel
    {
        partial void Initialize()
        {
            var product = ProductEntityType.Create(this);
            var productCategory = ProductCategoryEntityType.Create(this);
            var productImage = ProductImageEntityType.Create(this);

            ProductCategoryEntityType.CreateForeignKey1(productCategory, product);
            ProductImageEntityType.CreateForeignKey1(productImage, product);

            ProductEntityType.CreateAnnotations(product);
            ProductCategoryEntityType.CreateAnnotations(productCategory);
            ProductImageEntityType.CreateAnnotations(productImage);

            AddAnnotation("ProductVersion", "8.0.8");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var product = FindEntityType("ShopBlazeAPI.Models.Product")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var shopBlazeAPIModelsProductTableBase = new TableBase("ShopBlazeAPI.Models.Product", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", shopBlazeAPIModelsProductTableBase);
            shopBlazeAPIModelsProductTableBase.Columns.Add("Id", idColumnBase);
            var productNameColumnBase = new ColumnBase<ColumnMappingBase>("ProductName", "nvarchar(max)", shopBlazeAPIModelsProductTableBase);
            shopBlazeAPIModelsProductTableBase.Columns.Add("ProductName", productNameColumnBase);
            relationalModel.DefaultTables.Add("ShopBlazeAPI.Models.Product", shopBlazeAPIModelsProductTableBase);
            var shopBlazeAPIModelsProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, shopBlazeAPIModelsProductTableBase, true);
            shopBlazeAPIModelsProductTableBase.AddTypeMapping(shopBlazeAPIModelsProductMappingBase, false);
            defaultTableMappings.Add(shopBlazeAPIModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, product.FindProperty("Id")!, shopBlazeAPIModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productNameColumnBase, product.FindProperty("ProductName")!, shopBlazeAPIModelsProductMappingBase);

            var tableMappings = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var productsTable = new Table("Products", null, relationalModel);
            var idColumn = new Column("Id", "int", productsTable);
            productsTable.Columns.Add("Id", idColumn);
            var productNameColumn = new Column("ProductName", "nvarchar(max)", productsTable);
            productsTable.Columns.Add("ProductName", productNameColumn);
            var p_PK = new UniqueConstraint("P_PK", productsTable, new[] { idColumn });
            productsTable.PrimaryKey = p_PK;
            var p_PKUc = RelationalModel.GetKey(this,
                "ShopBlazeAPI.Models.Product",
                new[] { "Id" });
            p_PK.MappedKeys.Add(p_PKUc);
            RelationalModel.GetOrCreateUniqueConstraints(p_PKUc).Add(p_PK);
            productsTable.UniqueConstraints.Add("P_PK", p_PK);
            relationalModel.Tables.Add(("Products", null), productsTable);
            var productsTableMapping = new TableMapping(product, productsTable, true);
            productsTable.AddTypeMapping(productsTableMapping, false);
            tableMappings.Add(productsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, product.FindProperty("Id")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(productNameColumn, product.FindProperty("ProductName")!, productsTableMapping);

            var productCategory = FindEntityType("ShopBlazeAPI.Models.ProductCategory")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            productCategory.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var shopBlazeAPIModelsProductCategoryTableBase = new TableBase("ShopBlazeAPI.Models.ProductCategory", null, relationalModel);
            var categoryNameColumnBase = new ColumnBase<ColumnMappingBase>("CategoryName", "nvarchar(max)", shopBlazeAPIModelsProductCategoryTableBase)
            {
                IsNullable = true
            };
            shopBlazeAPIModelsProductCategoryTableBase.Columns.Add("CategoryName", categoryNameColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", shopBlazeAPIModelsProductCategoryTableBase);
            shopBlazeAPIModelsProductCategoryTableBase.Columns.Add("Id", idColumnBase0);
            var productIdColumnBase = new ColumnBase<ColumnMappingBase>("ProductId", "int", shopBlazeAPIModelsProductCategoryTableBase)
            {
                IsNullable = true
            };
            shopBlazeAPIModelsProductCategoryTableBase.Columns.Add("ProductId", productIdColumnBase);
            relationalModel.DefaultTables.Add("ShopBlazeAPI.Models.ProductCategory", shopBlazeAPIModelsProductCategoryTableBase);
            var shopBlazeAPIModelsProductCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(productCategory, shopBlazeAPIModelsProductCategoryTableBase, true);
            shopBlazeAPIModelsProductCategoryTableBase.AddTypeMapping(shopBlazeAPIModelsProductCategoryMappingBase, false);
            defaultTableMappings0.Add(shopBlazeAPIModelsProductCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, productCategory.FindProperty("Id")!, shopBlazeAPIModelsProductCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryNameColumnBase, productCategory.FindProperty("CategoryName")!, shopBlazeAPIModelsProductCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productIdColumnBase, productCategory.FindProperty("ProductId")!, shopBlazeAPIModelsProductCategoryMappingBase);

            var tableMappings0 = new List<TableMapping>();
            productCategory.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var productCategoryTable = new Table("ProductCategory", null, relationalModel);
            var idColumn0 = new Column("Id", "int", productCategoryTable);
            productCategoryTable.Columns.Add("Id", idColumn0);
            var categoryNameColumn = new Column("CategoryName", "nvarchar(max)", productCategoryTable)
            {
                IsNullable = true
            };
            productCategoryTable.Columns.Add("CategoryName", categoryNameColumn);
            var productIdColumn = new Column("ProductId", "int", productCategoryTable)
            {
                IsNullable = true
            };
            productCategoryTable.Columns.Add("ProductId", productIdColumn);
            var pC_PK = new UniqueConstraint("PC_PK", productCategoryTable, new[] { idColumn0 });
            productCategoryTable.PrimaryKey = pC_PK;
            var pC_PKUc = RelationalModel.GetKey(this,
                "ShopBlazeAPI.Models.ProductCategory",
                new[] { "Id" });
            pC_PK.MappedKeys.Add(pC_PKUc);
            RelationalModel.GetOrCreateUniqueConstraints(pC_PKUc).Add(pC_PK);
            productCategoryTable.UniqueConstraints.Add("PC_PK", pC_PK);
            var iX_ProductCategory_ProductId = new TableIndex(
            "IX_ProductCategory_ProductId", productCategoryTable, new[] { productIdColumn }, false);
            var iX_ProductCategory_ProductIdIx = RelationalModel.GetIndex(this,
                "ShopBlazeAPI.Models.ProductCategory",
                new[] { "ProductId" });
            iX_ProductCategory_ProductId.MappedIndexes.Add(iX_ProductCategory_ProductIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ProductCategory_ProductIdIx).Add(iX_ProductCategory_ProductId);
            productCategoryTable.Indexes.Add("IX_ProductCategory_ProductId", iX_ProductCategory_ProductId);
            relationalModel.Tables.Add(("ProductCategory", null), productCategoryTable);
            var productCategoryTableMapping = new TableMapping(productCategory, productCategoryTable, true);
            productCategoryTable.AddTypeMapping(productCategoryTableMapping, false);
            tableMappings0.Add(productCategoryTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, productCategory.FindProperty("Id")!, productCategoryTableMapping);
            RelationalModel.CreateColumnMapping(categoryNameColumn, productCategory.FindProperty("CategoryName")!, productCategoryTableMapping);
            RelationalModel.CreateColumnMapping(productIdColumn, productCategory.FindProperty("ProductId")!, productCategoryTableMapping);

            var productImage = FindEntityType("ShopBlazeAPI.Models.ProductImage")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            productImage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var shopBlazeAPIModelsProductImageTableBase = new TableBase("ShopBlazeAPI.Models.ProductImage", null, relationalModel);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "int", shopBlazeAPIModelsProductImageTableBase);
            shopBlazeAPIModelsProductImageTableBase.Columns.Add("Id", idColumnBase1);
            var imagesColumnBase = new ColumnBase<ColumnMappingBase>("Images", "varbinary(max)", shopBlazeAPIModelsProductImageTableBase)
            {
                IsNullable = true
            };
            shopBlazeAPIModelsProductImageTableBase.Columns.Add("Images", imagesColumnBase);
            var productIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ProductId", "int", shopBlazeAPIModelsProductImageTableBase)
            {
                IsNullable = true
            };
            shopBlazeAPIModelsProductImageTableBase.Columns.Add("ProductId", productIdColumnBase0);
            relationalModel.DefaultTables.Add("ShopBlazeAPI.Models.ProductImage", shopBlazeAPIModelsProductImageTableBase);
            var shopBlazeAPIModelsProductImageMappingBase = new TableMappingBase<ColumnMappingBase>(productImage, shopBlazeAPIModelsProductImageTableBase, true);
            shopBlazeAPIModelsProductImageTableBase.AddTypeMapping(shopBlazeAPIModelsProductImageMappingBase, false);
            defaultTableMappings1.Add(shopBlazeAPIModelsProductImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, productImage.FindProperty("Id")!, shopBlazeAPIModelsProductImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imagesColumnBase, productImage.FindProperty("Images")!, shopBlazeAPIModelsProductImageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)productIdColumnBase0, productImage.FindProperty("ProductId")!, shopBlazeAPIModelsProductImageMappingBase);

            var tableMappings1 = new List<TableMapping>();
            productImage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var productImagesTable = new Table("ProductImages", null, relationalModel);
            var idColumn1 = new Column("Id", "int", productImagesTable);
            productImagesTable.Columns.Add("Id", idColumn1);
            var imagesColumn = new Column("Images", "varbinary(max)", productImagesTable)
            {
                IsNullable = true
            };
            productImagesTable.Columns.Add("Images", imagesColumn);
            var productIdColumn0 = new Column("ProductId", "int", productImagesTable)
            {
                IsNullable = true
            };
            productImagesTable.Columns.Add("ProductId", productIdColumn0);
            var pI_PK = new UniqueConstraint("PI_PK", productImagesTable, new[] { idColumn1 });
            productImagesTable.PrimaryKey = pI_PK;
            var pI_PKUc = RelationalModel.GetKey(this,
                "ShopBlazeAPI.Models.ProductImage",
                new[] { "Id" });
            pI_PK.MappedKeys.Add(pI_PKUc);
            RelationalModel.GetOrCreateUniqueConstraints(pI_PKUc).Add(pI_PK);
            productImagesTable.UniqueConstraints.Add("PI_PK", pI_PK);
            var iX_ProductImages_ProductId = new TableIndex(
            "IX_ProductImages_ProductId", productImagesTable, new[] { productIdColumn0 }, false);
            var iX_ProductImages_ProductIdIx = RelationalModel.GetIndex(this,
                "ShopBlazeAPI.Models.ProductImage",
                new[] { "ProductId" });
            iX_ProductImages_ProductId.MappedIndexes.Add(iX_ProductImages_ProductIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ProductImages_ProductIdIx).Add(iX_ProductImages_ProductId);
            productImagesTable.Indexes.Add("IX_ProductImages_ProductId", iX_ProductImages_ProductId);
            relationalModel.Tables.Add(("ProductImages", null), productImagesTable);
            var productImagesTableMapping = new TableMapping(productImage, productImagesTable, true);
            productImagesTable.AddTypeMapping(productImagesTableMapping, false);
            tableMappings1.Add(productImagesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, productImage.FindProperty("Id")!, productImagesTableMapping);
            RelationalModel.CreateColumnMapping(imagesColumn, productImage.FindProperty("Images")!, productImagesTableMapping);
            RelationalModel.CreateColumnMapping(productIdColumn0, productImage.FindProperty("ProductId")!, productImagesTableMapping);
            var pC_FK = new ForeignKeyConstraint(
                "PC_FK", productCategoryTable, productsTable,
                new[] { productIdColumn },
                productsTable.FindUniqueConstraint("P_PK")!, ReferentialAction.NoAction);
            var pC_FKFk = RelationalModel.GetForeignKey(this,
                "ShopBlazeAPI.Models.ProductCategory",
                new[] { "ProductId" },
                "ShopBlazeAPI.Models.Product",
                new[] { "Id" });
            pC_FK.MappedForeignKeys.Add(pC_FKFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(pC_FKFk).Add(pC_FK);
            productCategoryTable.ForeignKeyConstraints.Add(pC_FK);
            productsTable.ReferencingForeignKeyConstraints.Add(pC_FK);
            var pI_FK = new ForeignKeyConstraint(
                "PI_FK", productImagesTable, productsTable,
                new[] { productIdColumn0 },
                productsTable.FindUniqueConstraint("P_PK")!, ReferentialAction.NoAction);
            var pI_FKFk = RelationalModel.GetForeignKey(this,
                "ShopBlazeAPI.Models.ProductImage",
                new[] { "ProductId" },
                "ShopBlazeAPI.Models.Product",
                new[] { "Id" });
            pI_FK.MappedForeignKeys.Add(pI_FKFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(pI_FKFk).Add(pI_FK);
            productImagesTable.ForeignKeyConstraints.Add(pI_FK);
            productsTable.ReferencingForeignKeyConstraints.Add(pI_FK);
            return relationalModel.MakeReadOnly();
        }
    }
}
